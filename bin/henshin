#!/usr/bin/env ruby
require 'henshin'
require 'henshin/exec/files'

require 'clive'
require 'fileutils'

help_banner = <<EOS
Usage: henshin    
       henshin [source]
       henshin [source]:[destination]
       
       henshin create
       henshin create [path for site]
       
EOS

build = {:server => false, :auto => false, :port => 9991, :address => '0.0.0.0'}
override = {}
c = Clive.new do
  header help_banner

  command(:create, "Create a basic henshin site") do
    
    build[:dirs] = ['layouts', 'posts']
    build[:files] = {'options.yaml' => Files.options,
                     'index.html' => Files.index, 
                     'layouts/main.html' => Files.layout, 
                     'posts/hello-world.markdown' => Files.post}

    command(:options, "Create options file") do
      build[:dirs] = []
      build[:files] = {'options.yaml' => Files.options}
    end
    
    command(:post, "Create a new post") do
      build[:dirs] = ['posts']
      build[:files] = {'posts/new-post.markdown' => Files.post}
    end
    
    command(:layout, "Create a new layout") do
      build[:dirs] = ['layouts']
      build[:files] = {'layouts/main.html' => Files.layout}
    end
    
    command(:archives, "Create archive layouts") do
      build[:dirs] = ['layouts']
      build[:files] = {'layouts/archive_date.html'  => Files::Archive.date,
                       'layouts/archive_month.html' => Files::Archive.month,
                       'layouts/archive_year.html'  => Files::Archive.year}
    end
    
    command(:tags, "Create tag layouts") do
      build[:dirs] = ['layouts']
      build[:files] = {'layouts/tag_index.html' => Files::Tag.index,
                       'layouts/tag_page.html'  => Files::Tag.page}
    end
    
    command(:categories, "Create category layouts") do
      build[:dirs] =['layouts']
      build[:files] = {'layouts/category_index.html' => Files::Category.index,
                       'layouts/category_page.html'  => Files::Category.page}
    end
    
    command(:full, "Create a full site (run with all commands)") do
      build[:dirs] = ['layouts', 'posts']
      build[:files] = {'options.yaml'                => Files.options,
                       'index.html'                  => Files.index, 
                       'posts/hello-world.markdown'  => Files.post,
                       'layouts/main.html'           => Files.layout, 
                       'layouts/archive_date.html'   => Files::Archive.date,
                       'layouts/archive_month.html'  => Files::Archive.month,
                       'layouts/archive_year.html'   => Files::Archive.year,
                       'layouts/tag_index.html'      => Files::Tag.index,
                       'layouts/tag_page.html'       => Files::Tag.page,
                       'layouts/category_index.html' => Files::Category.index,
                       'layouts/category_page.html'  => Files::Category.page}
    end
  
  
  end
  
  
  boolean(:s, :server, "Start server") do |i|
    build[:server] = i
  end
  
  boolean(:a, :auto, "Auto regenerate files") do |i|
    build[:auto] = i
  end
  
  switch(:version, "Display current version") do
    puts "Henshin #{Henshin.version}"
    exit 0
  end
end

args = c.parse(ARGV)

# For "create" command
if build[:dirs] && build[:files]
  if File.directory?(args[0])
    FileUtils.mkdir_p args[0]
    Dir.chdir args[0]
  end
  
  # create directories
  build[:dirs].each {|d| FileUtils.mkdir_p d}
  
  # write files
  build[:files].each do |f, c|
    file = File.new(f, "w")
    file.puts c
  end
  exit 0
end

# Get root and target
if args[0]
  override['root'] = args[0].split(':')[0]
  if args[0].split(':')[1]
    override['target'] = args[0].split(':')[1]
  else
    override['target'] = File.join(override['root'], Henshin::Defaults['target'])
  end
else
  override['root'] = Henshin::Defaults['root']
  override['target'] = Henshin::Defaults['target']
end

site = Henshin::Site.new(override)
unless build[:auto]
  start = Time.now
  # build normally
  puts "Building site..."
  site.build
  puts "Site created in #{site.config['target']} (#{Time.now - start}s)"
end

threads = []
# start a server
if build[:server]
  begin
    require 'mongrel'
    
    threads << Thread.new {
      @h = Mongrel::HttpServer.new(build[:address], build[:port])
      @h.register("/", Mongrel::DirHandler.new(override['target']))
      puts "Server launched at http://#{build[:address]}:#{build[:port]}"
      trap("INT") { 
        @h.stop
        puts "\n"
      }
      @h.run.join
    }
  rescue LoadError
  
    require 'webrick'
    threads << Thread.new { 
      server = WEBrick::HTTPServer.new(
        :Port => build[:port],
        :DocumentRoot => override['target'],
        :MimeTypes => WEBrick::HTTPUtils::DefaultMimeTypes
      )
      trap("INT") { server.shutdown }
      server.start
    }
    
  end
end

# regenerate files when changed
if build[:auto]
  require 'directory_watcher'
  
  puts "", "Auto-build initiated..."
  
  # build the glob pattern
  gl = Dir[ File.join(override['root'], '*')].select { |x| File.directory?(x) }
  ['/_site', '/plugins'].each do |r|
    gl = gl.select {|i| !i.include?( File.join(override['root'], r) )}
  end
  gl.collect! {|x| "#{x}/**/*"[override['root'].size+1..-1]}
  gl += ['*']

  dw = DirectoryWatcher.new(override['root'], :glob => gl)
  dw.interval = 1
  dw.add_observer do |*args| 
    if args.size > 1
      puts "rebuilding -> #{args.size} files"
    else
      puts "rebuilding -> #{args[0].path}"
    end
    site.build
  end
  
  threads << Thread.new { dw.start }
  loop { sleep 1000 } unless build[:server]
end  

threads.each {|t| t.join}
