#!/usr/bin/env ruby

require File.dirname(__FILE__) + '/../lib/henshin'
require File.dirname(__FILE__) + '/files.rb'
require 'optparse'
require 'fileutils'

banner = <<EOS
Usage: henshin    
       henshin [source]
       henshin [source]:[destination]
       
       henshin create
       henshin create [path for site]
       
EOS


if ARGV[0] == "create"
  if ARGV[1]
    # create the directory
    FileUtils.mkdir_p ARGV[1]
    # and cd to it
    Dir.chdir ARGV[1]
  end
  
  # create directories
  dirs = ['layouts', 'posts']
  dirs.each {|d| FileUtils.mkdir_p d}

  # write files  
  files = {'options.yaml' => opt_content,
           'index.html' => index_content, 
           'layouts/main.html' => layout_content, 
           'posts/hello-world.markdown' => post_content}
  files.each do |f, c|
    file = File.new( f, "w" )
    file.puts c
  end

else

  override = {}
  build = {:server => false, :port => 9991, :auto => false}
  opts = OptionParser.new do |opts|
    opts.banner = banner
    
    opts.on("--server", "-s", "Start server") do
      build[:server] = true
    end
    
    opts.on("--auto", "-a", "Auto regenerate files") do
      build[:auto] = true
    end
    
    opts.on("--version", "Display current version of Henshin") do
      puts "Henshin #{Henshin.version}"
      exit 0
    end
    
  end
  opts.parse!
  
  if ARGV[0]
    override[:root] = ARGV[0].split(':')[0]
    override[:target] = ARGV[0].split(':')[1] if ARGV[0].split(':')[1]
  end
  
  
  config = Henshin.configure(override)
  site = Henshin::Site.new(config)
  
  start = Time.now
  # build normally
  puts "Building site..."
  site.build
  puts "Site created in #{config[:target]} (#{Time.now - start}s)"
  
  threads = []
  # start a server
  if build[:server]
    require 'webrick'
    
    server = WEBrick::HTTPServer.new(
      :Port => build[:port],
      :DocumentRoot => File.join(config[:root], config[:target]),
      :MimeTypes => WEBrick::HTTPUtils::DefaultMimeTypes
    )
    
    threads << Thread.new { server.start }
    trap("INT") { server.shutdown }
  end
  
  # regenerate files when changed
  if build[:auto]
    require 'directory_watcher'
    
    puts "", "Auto-build initiated..."
    
    # build the glob pattern
    gl = Dir[ File.join(config[:root], '*')].select { |x| File.directory?(x) }
    ['/_site', '/plugins'].each do |r|
      gl = gl.select {|i| !i.include?( File.join(config[:root], r) )}
    end
    gl.collect! {|x| "#{x}/**/*"[config[:root].size+1..-1]}
    gl += ['*']

    dw = DirectoryWatcher.new config[:root], :glob => gl
    dw.interval = 1
    dw.add_observer do |*args| 
      if args.size > 1
        puts "rebuilding -> #{args.size} files"
      else
        puts "rebuilding -> #{args[0].path}"
      end
      site.build
      puts "rebuilt..."
    end
    
    threads << Thread.new { dw.start }
    loop { sleep 1000 } unless build[:server]
  end  

  threads.each {|t| t.join}
end
