#!/usr/bin/env ruby
require 'henshin'
require 'henshin/exec/files'

require 'optparse'
require 'fileutils'

banner = <<EOS
Usage: henshin    
       henshin [source]
       henshin [source]:[destination]
       
       henshin create
       henshin create [path for site]
       
EOS

if ARGV[0] == "create"

  dirs = ['layouts', 'posts']
  files = {'options.yaml' => Files.options,
           'index.html' => Files.index, 
           'layouts/main.html' => Files.layout, 
           'posts/hello-world.markdown' => Files.post}

  if ARGV[1]
    case ARGV[1]
    when 'options'
      # create new options file
      dirs = []
      files = {'options.yaml' => Files.options}
    when 'post'
      # create new post
      dirs = ['posts']
      files = {'posts/new-post.markdown' => Files.post}
    when 'layout'  
      # create new layout
      dirs = ['layouts']
      files = {'layouts/main.html' => Files.layout}
    when 'archives'
      # create archive layouts
      dirs = ['layouts']
      files = {'layouts/archive_date.html'  => Files::Archive.date,
               'layouts/archive_month.html' => Files::Archive.month,
               'layouts/archive_year.html'  => Files::Archive.year}
    when 'tags'
      # create tag layouts
      dirs = ['layouts']
      files = {'layouts/tag_index.html' => Files::Tag.index,
               'layouts/tag_page.html'  => Files::Tag.page}
    when 'categories'
      # create categories layouts
      dirs =['layouts']
      files = {'layouts/category_index.html' => Files::Category.index,
               'layouts/category_page.html'  => Files::Category.page}
    when 'full'
      # create everything
      dirs = ['layouts', 'posts']
      files = {'options.yaml'                => Files.options,
               'index.html'                  => Files.index, 
               'posts/hello-world.markdown'  => Files.post,
               'layouts/main.html'           => Files.layout, 
               'layouts/archive_date.html'   => Files::Archive.date,
               'layouts/archive_month.html'  => Files::Archive.month,
               'layouts/archive_year.html'   => Files::Archive.year,
               'layouts/tag_index.html'      => Files::Tag.index,
               'layouts/tag_page.html'       => Files::Tag.page,
               'layouts/category_index.html' => Files::Category.index,
               'layouts/category_page.html'  => Files::Category.page}
    else
      # create the directory
      FileUtils.mkdir_p ARGV[1]
      # and cd to it
      Dir.chdir ARGV[1]
    end
  end
  
  # make directories
  dirs.each {|d| FileUtils.mkdir_p d}

  # write files
  files.each do |f, c|
    file = File.new( f, "w" )
    file.puts c
  end

else

  override = {}
  build = {:server => false, :auto => false, :port => 9991, :address => '0.0.0.0'}
  opts = OptionParser.new do |opts|
    opts.banner = banner
    
    opts.on("--server", "-s", "Start server") do
      build[:server] = true
    end
    
    opts.on("--auto", "-a", "Auto regenerate files") do
      build[:auto] = true
    end
    
    opts.on("--version", "Display current version of Henshin") do
      puts "Henshin #{Henshin.version}"
      exit 0
    end
    
  end
  opts.parse!
  
  if ARGV[0]
    override['root'] = ARGV[0].split(':')[0]
    if ARGV[0].split(':')[1]
      override['target'] = ARGV[0].split(':')[1]
    else
      override['target'] = File.join(override['root'], Henshin::Defaults['target'])
    end
  else
    override['root'] = Henshin::Defaults['root']
    override['target'] = Henshin::Defaults['target']
  end
  
  
  site = Henshin::Site.new(override)
  unless build[:auto]
    start = Time.now
    # build normally
    puts "Building site..."
    site.build
    puts "Site created in #{site.config['target']} (#{Time.now - start}s)"
  end
  
  threads = []
  # start a server
  if build[:server]
    begin
      require 'mongrel'
      
      threads << Thread.new {
        @h = Mongrel::HttpServer.new(build[:address], build[:port])
        @h.register("/", Mongrel::DirHandler.new(override['target']))
        puts "Server launched at http://#{build[:address]}:#{build[:port]}"
        trap("INT") { 
          @h.stop
          puts "\n"
        }
        @h.run.join
      }
    rescue LoadError
    
      require 'webrick'
      threads << Thread.new { 
        server = WEBrick::HTTPServer.new(
          :Port => build[:port],
          :DocumentRoot => override['target'],
          :MimeTypes => WEBrick::HTTPUtils::DefaultMimeTypes
        )
        trap("INT") { server.shutdown }
        server.start
      }
      
    end
  end
  
  # regenerate files when changed
  if build[:auto]
    require 'directory_watcher'
    
    puts "", "Auto-build initiated..."
    
    # build the glob pattern
    gl = Dir[ File.join(override['root'], '*')].select { |x| File.directory?(x) }
    ['/_site', '/plugins'].each do |r|
      gl = gl.select {|i| !i.include?( File.join(override['root'], r) )}
    end
    gl.collect! {|x| "#{x}/**/*"[override['root'].size+1..-1]}
    gl += ['*']

    dw = DirectoryWatcher.new(override['root'], :glob => gl)
    dw.interval = 1
    dw.add_observer do |*args| 
      if args.size > 1
        puts "rebuilding -> #{args.size} files"
      else
        puts "rebuilding -> #{args[0].path}"
      end
      site.build
    end
    
    threads << Thread.new { dw.start }
    loop { sleep 1000 } unless build[:server]
  end  

  threads.each {|t| t.join}
end
